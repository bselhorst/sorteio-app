"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transport = void 0;

var events_1 = require("events");

var parser_v4 = require("engine.io-parser");

var parser_v3 = require("./parser-v3/index");

var debug_1 = require("debug");

var debug = (0, debug_1["default"])("engine:transport");

function noop() {}

var Transport =
/*#__PURE__*/
function (_events_1$EventEmitte) {
  _inherits(Transport, _events_1$EventEmitte);

  _createClass(Transport, [{
    key: "readyState",
    get: function get() {
      return this._readyState;
    },
    set: function set(state) {
      debug("readyState updated from %s to %s (%s)", this._readyState, state, this.name);
      this._readyState = state;
    }
    /**
     * Transport constructor.
     *
     * @param {EngineRequest} req
     */

  }]);

  function Transport(req) {
    var _this;

    _classCallCheck(this, Transport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transport).call(this));
    /**
     * Whether the transport is currently ready to send packets.
     */

    _this.writable = false;
    /**
     * The current state of the transport.
     * @protected
     */

    _this._readyState = "open";
    /**
     * Whether the transport is discarded and can be safely closed (used during upgrade).
     * @protected
     */

    _this.discarded = false;
    _this.protocol = req._query.EIO === "4" ? 4 : 3; // 3rd revision by default

    _this.parser = _this.protocol === 4 ? parser_v4 : parser_v3;
    _this.supportsBinary = !(req._query && req._query.b64);
    return _this;
  }
  /**
   * Flags the transport as discarded.
   *
   * @package
   */


  _createClass(Transport, [{
    key: "discard",
    value: function discard() {
      this.discarded = true;
    }
    /**
     * Called with an incoming HTTP request.
     *
     * @param req
     * @package
     */

  }, {
    key: "onRequest",
    value: function onRequest(req) {}
    /**
     * Closes the transport.
     *
     * @package
     */

  }, {
    key: "close",
    value: function close(fn) {
      if ("closed" === this.readyState || "closing" === this.readyState) return;
      this.readyState = "closing";
      this.doClose(fn || noop);
    }
    /**
     * Called with a transport error.
     *
     * @param {String} msg - message error
     * @param {Object} desc - error description
     * @protected
     */

  }, {
    key: "onError",
    value: function onError(msg, desc) {
      if (this.listeners("error").length) {
        var err = new Error(msg); // @ts-ignore

        err.type = "TransportError"; // @ts-ignore

        err.description = desc;
        this.emit("error", err);
      } else {
        debug("ignored transport error %s (%s)", msg, desc);
      }
    }
    /**
     * Called with parsed out a packets from the data stream.
     *
     * @param {Object} packet
     * @protected
     */

  }, {
    key: "onPacket",
    value: function onPacket(packet) {
      this.emit("packet", packet);
    }
    /**
     * Called with the encoded packet data.
     *
     * @param {String} data
     * @protected
     */

  }, {
    key: "onData",
    value: function onData(data) {
      this.onPacket(this.parser.decodePacket(data));
    }
    /**
     * Called upon transport close.
     *
     * @protected
     */

  }, {
    key: "onClose",
    value: function onClose() {
      this.readyState = "closed";
      this.emit("close");
    }
  }]);

  return Transport;
}(events_1.EventEmitter);

exports.Transport = Transport;