"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebSocket = void 0;

var transport_1 = require("../transport");

var debug_1 = require("debug");

var debug = (0, debug_1["default"])("engine:ws");

var WebSocket =
/*#__PURE__*/
function (_transport_1$Transpor) {
  _inherits(WebSocket, _transport_1$Transpor);

  /**
   * WebSocket transport
   *
   * @param req
   */
  function WebSocket(req) {
    var _this;

    _classCallCheck(this, WebSocket);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this, req));
    _this.writable = false;
    _this.perMessageDeflate = null;
    return _this;
  }
  /**
   * Transport name
   */


  _createClass(WebSocket, [{
    key: "send",

    /**
     * Writes a packet payload.
     *
     * @param {Array} packets
     * @private
     */
    value: function send(packets) {
      var _this2 = this;

      this.writable = false;

      var _loop = function _loop(i) {
        var packet = packets[i];
        var isLast = i + 1 === packets.length;

        var send = function send(data) {
          var isBinary = typeof data !== "string";

          var compress = _this2.perMessageDeflate && Buffer.byteLength(data) > _this2.perMessageDeflate.threshold;

          debug('writing "%s"', data);

          _this2.socket.send(data, isBinary, compress);

          if (isLast) {
            _this2.emit("drain");

            _this2.writable = true;

            _this2.emit("ready");
          }
        };

        if (packet.options && typeof packet.options.wsPreEncoded === "string") {
          send(packet.options.wsPreEncoded);
        } else {
          _this2.parser.encodePacket(packet, _this2.supportsBinary, send);
        }
      };

      for (var i = 0; i < packets.length; i++) {
        _loop(i);
      }
    }
    /**
     * Closes the transport.
     *
     * @private
     */

  }, {
    key: "doClose",
    value: function doClose(fn) {
      debug("closing");
      fn && fn(); // call fn first since socket.end() immediately emits a "close" event

      this.socket.end();
    }
  }, {
    key: "name",
    get: function get() {
      return "websocket";
    }
    /**
     * Advertise upgrade support.
     */

  }, {
    key: "handlesUpgrades",
    get: function get() {
      return true;
    }
  }]);

  return WebSocket;
}(transport_1.Transport);

exports.WebSocket = WebSocket;