"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebSocket = void 0;

var transport_1 = require("../transport");

var debug_1 = require("debug");

var debug = (0, debug_1["default"])("engine:ws");

var WebSocket =
/*#__PURE__*/
function (_transport_1$Transpor) {
  _inherits(WebSocket, _transport_1$Transpor);

  /**
   * WebSocket transport
   *
   * @param {EngineRequest} req
   */
  function WebSocket(req) {
    var _this;

    _classCallCheck(this, WebSocket);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this, req));

    _this._doSend = function (data) {
      _this.socket.send(data, _this._onSent);
    };

    _this._doSendLast = function (data) {
      _this.socket.send(data, _this._onSentLast);
    };

    _this._onSent = function (err) {
      if (err) {
        _this.onError("write error", err.stack);
      }
    };

    _this._onSentLast = function (err) {
      if (err) {
        _this.onError("write error", err.stack);
      } else {
        _this.emit("drain");

        _this.writable = true;

        _this.emit("ready");
      }
    };

    _this.socket = req.websocket;

    _this.socket.on("message", function (data, isBinary) {
      var message = isBinary ? data : data.toString();
      debug('received "%s"', message);

      _get(_getPrototypeOf(WebSocket.prototype), "onData", _assertThisInitialized(_this)).call(_assertThisInitialized(_this), message);
    });

    _this.socket.once("close", _this.onClose.bind(_assertThisInitialized(_this)));

    _this.socket.on("error", _this.onError.bind(_assertThisInitialized(_this)));

    _this.writable = true;
    _this.perMessageDeflate = null;
    return _this;
  }
  /**
   * Transport name
   */


  _createClass(WebSocket, [{
    key: "send",
    value: function send(packets) {
      this.writable = false;

      for (var i = 0; i < packets.length; i++) {
        var packet = packets[i];
        var isLast = i + 1 === packets.length;

        if (this._canSendPreEncodedFrame(packet)) {
          // the WebSocket frame was computed with WebSocket.Sender.frame()
          // see https://github.com/websockets/ws/issues/617#issuecomment-283002469
          this.socket._sender.sendFrame( // @ts-ignore
          packet.options.wsPreEncodedFrame, isLast ? this._onSentLast : this._onSent);
        } else {
          this.parser.encodePacket(packet, this.supportsBinary, isLast ? this._doSendLast : this._doSend);
        }
      }
    }
    /**
     * Whether the encoding of the WebSocket frame can be skipped.
     * @param packet
     * @private
     */

  }, {
    key: "_canSendPreEncodedFrame",
    value: function _canSendPreEncodedFrame(packet) {
      var _a, _b, _c;

      return !this.perMessageDeflate && typeof ((_b = (_a = this.socket) === null || _a === void 0 ? void 0 : _a._sender) === null || _b === void 0 ? void 0 : _b.sendFrame) === "function" && // @ts-ignore
      ((_c = packet.options) === null || _c === void 0 ? void 0 : _c.wsPreEncodedFrame) !== undefined;
    }
  }, {
    key: "doClose",
    value: function doClose(fn) {
      debug("closing");
      this.socket.close();
      fn && fn();
    }
  }, {
    key: "name",
    get: function get() {
      return "websocket";
    }
    /**
     * Advertise upgrade support.
     */

  }, {
    key: "handlesUpgrades",
    get: function get() {
      return true;
    }
  }]);

  return WebSocket;
}(transport_1.Transport);

exports.WebSocket = WebSocket;