"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebTransport = void 0;

var transport_1 = require("../transport");

var debug_1 = require("debug");

var engine_io_parser_1 = require("engine.io-parser");

var debug = (0, debug_1["default"])("engine:webtransport");
/**
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/WebTransport_API
 */

var WebTransport =
/*#__PURE__*/
function (_transport_1$Transpor) {
  _inherits(WebTransport, _transport_1$Transpor);

  function WebTransport(session, stream, reader) {
    var _this;

    _classCallCheck(this, WebTransport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebTransport).call(this, {
      _query: {
        EIO: "4"
      }
    }));
    _this.session = session;
    var transformStream = (0, engine_io_parser_1.createPacketEncoderStream)();
    transformStream.readable.pipeTo(stream.writable)["catch"](function () {
      debug("the stream was closed");
    });
    _this.writer = transformStream.writable.getWriter();

    (function _callee() {
      var _ref, value, done;

      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

            case 1:
              if (!true) {
                _context.next = 14;
                break;
              }

              _context.next = 4;
              return regeneratorRuntime.awrap(reader.read());

            case 4:
              _ref = _context.sent;
              value = _ref.value;
              done = _ref.done;

              if (!done) {
                _context.next = 10;
                break;
              }

              debug("session is closed");
              return _context.abrupt("break", 14);

            case 10:
              debug("received chunk: %o", value);

              _this.onPacket(value);

              _context.next = 1;
              break;

            case 14:
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](0);
              debug("error while reading: %s", _context.t0.message);

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[0, 16]]);
    })();

    session.closed.then(function () {
      return _this.onClose();
    });
    _this.writable = true;
    return _this;
  }

  _createClass(WebTransport, [{
    key: "send",
    value: function send(packets) {
      var i, packet;
      return regeneratorRuntime.async(function send$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.writable = false;
              _context2.prev = 1;
              i = 0;

            case 3:
              if (!(i < packets.length)) {
                _context2.next = 10;
                break;
              }

              packet = packets[i];
              _context2.next = 7;
              return regeneratorRuntime.awrap(this.writer.write(packet));

            case 7:
              i++;
              _context2.next = 3;
              break;

            case 10:
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](1);
              debug("error while writing: %s", _context2.t0.message);

            case 15:
              this.emit("drain");
              this.writable = true;
              this.emit("ready");

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[1, 12]]);
    }
  }, {
    key: "doClose",
    value: function doClose(fn) {
      debug("closing WebTransport session");
      this.session.close();
      fn && fn();
    }
  }, {
    key: "name",
    get: function get() {
      return "webtransport";
    }
  }]);

  return WebTransport;
}(transport_1.Transport);

exports.WebTransport = WebTransport;